---
import {socialMedia} from '@cv'
import Icon from '@/components/Icon.astro'
interface Props {
  size? : string;
  iconSize?: string;
  showCircle?: boolean;
  rotation?: 'left' | 'right';
  startAngle?: number;
  totalAngle?: number;
}
const {size = '200px', 
      iconSize = '30px',
      showCircle = false,
      rotation = 'right',
      startAngle = 90,
      totalAngle = 360,
} = Astro.props;

let rotationValue = rotation === 'left' ? -1 : 1;
---
<div 
  class="donut relative flex flex-row justify-center items-center"
  style=`width:${size}; height: ${size}`
  >
  {socialMedia.map(({network, username, url, color}, index) => (
    <div 
      class="element absolute bg-gray-500 rounded-full flex items-center justify-center"
      style={`
        --bg-hover-color: ${color};
        width: ${iconSize}; 
        height: ${iconSize};
        transform: rotate(${(rotationValue * (index * 360 / socialMedia.length)) - startAngle}deg) 
                   translate(${(parseInt(size) - parseInt(iconSize))/2}px) 
                   rotate(-${(rotationValue * (index * 360 / socialMedia.length))+(rotation === 'right'? (360 - startAngle) : ((360 - startAngle) + 360))}deg);
      `}
      >
      <a class="w-full rounded-full" href={`${url}`} target="_blank" rel="noopener noreferrer">
        <Icon 
          iconName={`${network}`} 
          style='fill-white p-1'
        />
      </a>
    </div>
  ))}
  {showCircle ? (
    <div 
      class="circle-container w-full h-full"
      style={`padding: ${(parseInt(iconSize) / 2)}px`}>
      <div class="circle flex flex-row justify-center items-center rounded-full border border-white w-full h-full">
      </div>
    </div>
  ): (<></>)}
</div>

<style>
  .element:hover {
    background-color: var(--bg-hover-color, black);
  }
</style>